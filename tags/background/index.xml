<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>background on Jonathan Loscalzo</title><link>https://jonathanloscalzo.github.io/tags/background/</link><description>Recent content in background on Jonathan Loscalzo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 20 Apr 2021 23:54:03 -0300</lastBuildDate><atom:link href="https://jonathanloscalzo.github.io/tags/background/index.xml" rel="self" type="application/rss+xml"/><item><title>Bash commands to execute tasks on background</title><link>https://jonathanloscalzo.github.io/2021/04/bash-commands-to-execute-tasks-on-background/</link><pubDate>Tue, 20 Apr 2021 23:54:03 -0300</pubDate><guid>https://jonathanloscalzo.github.io/2021/04/bash-commands-to-execute-tasks-on-background/</guid><description>Process start in the background, but it is still connected with the terminal (if you close the terminal, the process will be terminated)
&amp;lt;command&amp;gt; &amp;amp; Actually, above command continues printing on the shell&amp;hellip; To avoid that behavior, we could redirect the standard output
&amp;lt;command&amp;gt; &amp;amp;&amp;gt;/dev/null &amp;amp; # it is redirecting both, STDOUT and STDERR to /dev/null Remember, we could also use streams =&amp;gt; STDIN, STDOUT &amp;amp; STDERR (0, 1 &amp;amp; 2)</description></item></channel></rss>